// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image               UserImage?
  password            Password?
  sessions            Session[]
  connections         Connection[]
  roles               RolesOnUsers[]
  quizzesResults      QuizUserResults[]
  quizzesFavorites    QuizUserFavorites[]
  flashcardsFavorites FlashcardUserFavorites[]
  flashcardAnswers    FlashcardUserAnswers[]
  lists               ListsUser[]
  notifyErrors        NotifyError[]            @relation(name: "user")
  fixedBy             NotifyError[]            @relation(name: "fixedBy")
  FlashcardIgnore     FlashcardIgnore[]
  UserFlashcard       UserFlashcard[]
  createdProduct      Product[]                @relation(name: "createdBy")
  updatedProduct      Product[]                @relation(name: "updatedBy")

  @@map("users")
}

model PurchasesUser {
  id                 String    @id @default(cuid())
  name               String
  plan               String?
  email              String
  purchaseAt         DateTime  @default(now())
  expiresAt          DateTime?
  status             String?
  refundedAt         DateTime?
  transactionHotmart String?
  productHotmart     String?
  productId          Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model RolesOnUsers {
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model PermissionsOnRoles {
  permissionId String
  roleId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  permission Permission @relation(fields: [permissionId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])

  @@id([permissionId, roleId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       RolesOnUsers[]
  permissions PermissionsOnRoles[]
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  permissions PermissionsOnRoles[]

  @@unique([action, entity, access])
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Banca {
  id        String   @id @default(cuid())
  name      String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizzes   Quiz[]

  @@map("bancas")
}

model Cargo {
  id        String   @id @default(cuid())
  name      String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizzes   Quiz[]

  @@map("cargos")
}

model Materia {
  id        String   @id @default(cuid())
  name      String
  color     String?
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lei       Lei[]

  @@map("materias")
}

model Lei {
  id            String          @id @default(cuid())
  name          String
  materiaId     String
  materia       Materia         @relation(fields: [materiaId], references: [id])
  status        Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  titulos       Titulo[]
  combosLeis    LeisOnCombos[]
  UserFlashcard UserFlashcard[]

  @@map("leis")
}

model Titulo {
  id        String     @id @default(cuid())
  name      String
  status    Boolean    @default(true)
  leiId     String
  lei       Lei        @relation(fields: [leiId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  capitulos Capitulo[]

  @@index([leiId])
  @@map("titulos")
}

model Capitulo {
  id        String   @id @default(cuid())
  name      String
  status    Boolean  @default(true)
  tituloId  String
  titulo    Titulo   @relation(fields: [tituloId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artigos   Artigo[]

  @@index([tituloId])
  @@map("capitulos")
}

model Artigo {
  id         String      @id @default(cuid())
  name       String
  status     Boolean     @default(true)
  capituloId String
  capitulo   Capitulo    @relation(fields: [capituloId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  quizzes    Quiz[]
  flashcards Flashcard[]

  @@index([capituloId])
  @@map("artigos")
}

model Quiz {
  id            String              @id @default(cuid())
  status        Boolean             @default(true)
  enunciado     String
  comentario    String
  fundamento    String?
  tags          String?
  verdadeiro    Boolean
  ano           Int?
  artigoId      String
  bancaId       String?
  cargoId       String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  artigo        Artigo              @relation(fields: [artigoId], references: [id])
  banca         Banca?              @relation(fields: [bancaId], references: [id])
  cargo         Cargo?              @relation(fields: [cargoId], references: [id])
  userResults   QuizUserResults[]
  userFavorites QuizUserFavorites[]
  notifyErrors  NotifyError[]

  @@index([artigoId])
  @@index([bancaId, cargoId])
  @@map("quizzes")
}

model QuizUserResults {
  id        String   @id @default(cuid())
  result    Boolean
  quizId    String
  userId    String
  createdAt DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("quiz_user_results")
}

model QuizUserFavorites {
  quizId String
  userId String

  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])

  @@id([quizId, userId])
  @@index([userId])
}

model Flashcard {
  id              String                   @id @default(cuid())
  status          Boolean                  @default(true)
  titulo          String?
  frente          String
  verso           String
  fundamento      String?
  artigoId        String
  artigo          Artigo                   @relation(fields: [artigoId], references: [id])
  dificuldade     String?
  tipo            String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  usersFavorites  FlashcardUserFavorites[]
  userAnswers     FlashcardUserAnswers[]
  listsUsers      ListsUsersFlashcards[]
  notifyerrors    NotifyError[]
  FlashcardIgnore FlashcardIgnore[]
}

model FlashcardUserFavorites {
  flashcardId String
  userId      String

  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  flashcard Flashcard @relation(fields: [flashcardId], references: [id])

  @@id([flashcardId, userId])
  @@index([userId])
}

model FlashcardUserAnswers {
  id          String   @id @default(cuid())
  answer      String
  flashcardId String
  userId      String
  createdAt   DateTime @default(now())

  flashcard Flashcard @relation(fields: [flashcardId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([flashcardId])
  @@map("flashcard_user_answers")
}

model Combo {
  id          String           @id @default(cuid())
  name        String
  status      Boolean          @default(true)
  color       String?
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  leisCombos  LeisOnCombos[]
  image       ComboImage?
  products    ComboOnProduct[]

  @@map("combos")
}

model ComboImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  combo   Combo  @relation(fields: [comboId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comboId String @unique
}

model ListsUser {
  id         String                 @id @default(cuid())
  name       String
  userId     String
  user       User                   @relation(fields: [userId], references: [id])
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  flashcards ListsUsersFlashcards[]

  @@map("listsUsers")
}

model ListsUsersFlashcards {
  id            String   @id @default(cuid())
  listId        String
  flashcardId   String?
  myflashcardId String?
  createdAt     DateTime @default(now())

  list        ListsUser      @relation(fields: [listId], references: [id])
  flashcard   Flashcard?     @relation(fields: [flashcardId], references: [id])
  myflashcard UserFlashcard? @relation(fields: [myflashcardId], references: [id])

  @@index([listId])
}

model LeisOnCombos {
  comboId   String
  leiId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  combo Combo @relation(fields: [comboId], references: [id])
  lei   Lei   @relation(fields: [leiId], references: [id])

  @@id([comboId, leiId])
  @@index([comboId])
}

model NotifyError {
  id           String   @id @default(cuid())
  quizId       String?
  flashcardId  String?
  userId       String
  userMessage  String
  fixedMessage String?
  fixed        Boolean  @default(false)
  fixedById    String?
  createdAt    DateTime @default(now())

  quiz      Quiz?      @relation(fields: [quizId], references: [id])
  flashcard Flashcard? @relation(fields: [flashcardId], references: [id])
  user      User       @relation("user", fields: [userId], references: [id])
  fixedBy   User?      @relation("fixedBy", fields: [fixedById], references: [id])

  @@index([userId])
}

model FlashcardIgnore {
  id          String   @id @default(cuid())
  flashcardId String
  userId      String
  createdAt   DateTime @default(now())

  flashcard Flashcard @relation(fields: [flashcardId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Config {
  id          String   @id @default(cuid())
  notifyEmail String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("configs")
}

model UserFlashcard {
  id        String                 @id @default(cuid())
  frente    String
  verso     String
  userId    String
  leiId     String
  user      User                   @relation(fields: [userId], references: [id])
  lei       Lei                    @relation(fields: [leiId], references: [id])
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  userList  ListsUsersFlashcards[]
}

model Product {
  id               String           @id @default(cuid())
  name             String
  description      String?
  hotmartLink      String?
  createdById      String
  updatedById      String?
  productIdHotmart Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  createdBy        User             @relation("createdBy", fields: [createdById], references: [id])
  updatedBy        User?            @relation("updatedBy", fields: [updatedById], references: [id])
  combos           ComboOnProduct[]
}

model ComboOnProduct {
  comboId   String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  combo   Combo   @relation(fields: [comboId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([comboId, productId])
}
